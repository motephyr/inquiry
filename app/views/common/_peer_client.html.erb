<% if current_user %>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.14/peer.js"></script>
<script>
window.onGossimLoad = function(){

	GossimPeer.init('<%= Setting.gossim %>' || "test", '<%= current_user.id %>');

	// handle the online case first.
	// params: caller {Object}
	GossimPeer.on('callee', function(caller){

		// make custom popup
			// Accept button
			// Reject button
		console.log("some body call me");
		console.log(caller);
	});
};

window.ConkweHangout = {
	IDLE: 0,
	CALLING: 1,
	CALLEE: 2,
	ONPHONE: 3,
	ENDPHONE: 4,
	_status: 0,
	_target: null,
	_opened: false,
	_el: null,
	// cache for speed
	_innerSecondText: null,
	_seconds: 0,
	_interval: null,
	get counting(){ return this._seconds; },
	set counting(sec){
		var self = this;
		if(!self._innerSecondText) self._innerSecondText = self._el.querySelector('.hangout-viewer-time p');
		var times = [];
		var digits = 3;
		var tmp = sec;
		while(tmp && times.length < 3){
			times.push(tmp % 60);
			tmp = Math.floor(tmp / 60);
		}
		var addZeros = digits - times.length;
		while(addZeros--) times.push(0);
		self._innerSecondText.textContent = 
			times.map(function(s){ return s < 10? ("0" + s) : s.toString(); })
				.reverse()
				.join(':');

		self._seconds = sec;
	},
	get state(){ return this._status; },
	set state(stateConstant){
		var self = this;
		self._status = stateConstant;
		if(self._el){
			var btnWrap = self._el.querySelector('.hangout-viewer-buttons');
			var textWrap = self._el.querySelector('.hangout-viewer-text');
			var timeWrap = self._el.querySelector('.hangout-viewer-time');
			switch(stateConstant){
				case self.IDLE:
					btnWrap.innerHTML = '<hr><button class="btn btn-default">YES</button><button class="btn btn-default">NO</button>';
					btnWrap.children[1].addEventListener('click', function(){ 
						self.state = self.CALLING;
						// GossimPeer.call(self._target);
					});
					btnWrap.children[2].addEventListener('click', function(){ self.close(); });
					textWrap.innerHTML = '<p>是否願意邀請他與您語音通話？</p>';
					timeWrap.classList.remove('hangout-show');
					break;
				case self.CALLING:
				// hang up
					btnWrap.innerHTML = '<hr><button class="btn btn-default">取消</button>';
					btnWrap.children[1].addEventListener('click', function(){ 
						// GossimPeer.cancel();
						self.close();
					});
					textWrap.innerHTML = '<p>正在通話中...</p>';
					timeWrap.classList.remove('hangout-show');

					// for test
					// setTimeout(function(){ self.state = self.ONPHONE; }, 2000);

					break;
				case self.CALLEE:
				// accept or reject
					btnWrap.innerHTML = '<hr><button class="btn btn-default">好啊</button><button class="btn btn-default">拒絕</button>';
					btnWrap.children[1].addEventListener('click', function(){ 
						self.state = self.ONPHONE;
						// GossimPeer.accept();
					});
					btnWrap.children[2].addEventListener('click', function(){ 
						// GossimPeer.reject();
						self.close();
					});
					textWrap.innerHTML = '<p>想與您語音通話</p>';
					timeWrap.classList.remove('hangout-show');
					break;
				case self.ONPHONE:
					
					btnWrap.innerHTML = '<hr><button class="btn btn-default">掛斷</button>';
					btnWrap.children[1].addEventListener('click', function(){
						self.state = self.ENDPHONE;
						// GossimPeer.hangup();
					});
					textWrap.innerHTML = '<p>通話時間</p>';
					timeWrap.innerHTML = '<p>00:00:00</p>';

					self._interval = setInterval(function(){
						setTimeout(function(){ self.counting += 1; }, 0);
					}, 1000);
					
					timeWrap.classList.add('hangout-show');
					break;
				case self.ENDPHONE:
					// GossimPeer.hangup();
					if(self._interval) clearInterval(self._interval);
					btnWrap.innerHTML = '<hr><button class="btn btn-default">確認</button>';
					btnWrap.children[1].addEventListener('click', function(){ self.close(); });
					textWrap.innerHTML = '<p>您與他通話了...</p>';

					timeWrap.classList.add('hangout-show');
					break;	
			}
		}
	},
	_init: function(){
		var self = this;
		self._el = document.querySelector('.hangout-viewer');
		self._info = {
			set image(src){
				if(self._el && src){
					var img = self._el.querySelector('.hangout-info-image');
					img.src = src;
				}
			},
			set name(n){
				if(self._el && n){
					var name = self._el.querySelector('.hangout-info-name');
					name.textContent = n;
				}
			}
		};
		self.state = self.IDLE;
	},
	open: function(id, name, image){
		var self = this;
		self._target = id;
		if(self._target && !self._opened){
			self._opened = true;
			if(!self._el) self._init();

			self._info.image = image;
			self._info.name = name;
			// target accept
			// GossimPeer.on('accept', function(){
			// });

			// target reject
			// GossimPeer.on('reject', function(){
			// });
			self._el.classList.add('hangout-show');
		}
	},
	close: function(){
		var self = this;
		// GossimPeer.off('accept');
		// GossimPeer.off('reject');
		if(self._interval) clearInterval(self._interval);
		if(self.state != self.IDLE) self.state = self.IDLE;
		self._target = null;
		self._innerSecondText = null;
		self._opened = false;
		self._seconds = 0;
		self._el.classList.remove('hangout-show');
	}
}

window.testcall = function(targetId){
	GossimPeer.call(targetId);
	
};

// ==== test code ====

// navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

// if(getParams('id')){
//     var id = getParams('id');
//     var peer = new Peer(id, {host: '976a55c6.ngrok.io', port: 443, path: '/'});

//     $(document.body).append("\
//       <div>\
//         <input id='peer-caller' type='text' width='50'>\
//         <button id='callBtn' onclick='peerHandles.peerCalling();'>CALL</button>\
//         <button id='acceptBtn' onclick='peerAccept();' disabled='true'>Accept</button>\
//         <button id='hangupBtn' onclick='peerHandles.peerHangup();' disabled='true'>Hang Up</button>\
//       </div>\
//       <video id='talkingVideo'></video>");

//     window.peerHandles = {
//       currentCall: null,
//       changeBtnStatus: function(status){
//         var setting = {
//           "idle": [false, true, true],
//           "havecall": [true, false, true],
//           "calling": [true, true, false],
//           "talking": [true, true, false]
//         }
//         var s = setting[status];
//         $("#callBtn").prop('disabled', s[0]);
//         $("#acceptBtn").prop('disabled', s[1]);
//         $("#hangupBtn").prop('disabled', s[2]); 
//       },
//       handleStream: function (remoteStream){
//         peerHandles.changeBtnStatus("talking");

//         var video = document.querySelector('#talkingVideo');
//         video.srcObject = remoteStream;
//         video.onloadedmetadata = function(e) {
//           video.play();
//         };
//       },
//       peerCalling: function (){
//         var target = $('#peer-caller').val();
//         var self = this;
//         navigator.getUserMedia({audio: true, video:false}, function(stream) {
//           var call = peer.call(target, stream);
//           self.changeBtnStatus("calling");
//           call.on('stream', self.handleStream);
//           self.currentCall = call;
//         }, function(err) {
//           console.log('Failed to get local stream' ,err);
//           self.peerHangup();
//         });
//       },
//       peerHangup: function (){
//         var self = this;
//         if(self.currentCall){
//           self.currentCall.close();
//           self.currentCall = null;
//         }
//         // peer.disconnect();
//         var video = document.querySelector('#talkingVideo');
//         video.pause();
//         this.changeBtnStatus("idle");
//       }
//     };

//     peer.on('call', function(calleeObj) {
//       peerHandles.changeBtnStatus("havecall");
//       peerHandles.currentCall = calleeObj;
//       window.peerAccept = (function(call){
//         return function(){
//           navigator.getUserMedia({audio: true, video:false}, function(stream) {
//             call.answer(stream); // Answer the call with an A/V stream.
//             call.on('stream', peerHandles.handleStream);
//           }, function(err) {
//             console.log('Failed to get local stream' ,err);
//             peerHandles.peerHangup();
//           });
//         };
//       })(calleeObj);
//     });

//     peerHandles.changeBtnStatus("idle");
//   }
</script>

<%= render 'common/hangout' %>

<% end %>